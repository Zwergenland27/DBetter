@using DBetter.Frontend.Services
@inject IJSRuntime Js
@inject SidebarLanguageService Language;
<div class="d-flex flex-column flex-shrink-0 bg-body-tertiary" style="width: 4.5rem;">
    <img src="images/logo-transparent.svg" class="d-block border-bottom" alt="DBetter Logo" />
    <nav class="nav nav-pills nav-flush flex-column mb-auto text-center">
        <div class="nav-item">
            <NavLink class="nav-link py-3 border-bottom rounded-0" data-bs-toggle="popover" data-bs-trigger="hover" data-bs-placement="right" data-bs-content="@Language.Home" href="" Match="NavLinkMatch.All">
                <i class="material-icons">home</i>
            </NavLink>
        </div>
        <div class="nav-item">
            <NavLink class="nav-link py-3 border-bottom rounded-0" data-bs-toggle="popover" data-bs-trigger="hover" data-bs-placement="right" data-bs-content="@Language.Connection" href="Connection">
                <i class="material-icons">search</i>
            </NavLink>
        </div>
        <div>
            <NavLink class="nav-link py-3 border-bottom rounded-0" data-bs-toggle="popover" data-bs-trigger="hover" data-bs-placement="right" data-bs-content="@Language.Trips" href="Trips">
                <i class="material-icons">route</i>
            </NavLink>
        </div>
    </nav>
    <div class="dropdown border-top">
        <a href="#" class="d-flex align-items-center justify-content-center p-3 link-body-emphasis text-decoration-none dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
            <i class="material-icons">person</i>
        </a>
        <ul class="dropdown-menu text-small shadow">
            <li>
                <a class="dropdown-item" href="#">Register</a>
            </li>
            <li>
                <a class="dropdown-item" href="#">Login</a>
            </li>
        </ul>
    </div>
</div>

<script>
    function addTooltips() {
        const popoverTriggerList = document.querySelectorAll('[data-bs-toggle="popover"]')
        const popoverList = [...popoverTriggerList].map(popoverTriggerEl => new bootstrap.Popover(popoverTriggerEl))
    }

</script>

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Js.InvokeVoidAsync("addTooltips");
        }
    }
}